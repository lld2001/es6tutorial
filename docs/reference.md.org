* 参考链接
  :PROPERTIES:
  :CUSTOM_ID: 参考链接
  :END:

** 官方文件
   :PROPERTIES:
   :CUSTOM_ID: 官方文件
   :END:

- [[http://www.ecma-international.org/ecma-262/6.0/index.html][ECMAScript®
  2015 Language Specification]]: ECMAScript 2015 规格
- [[http://www.ecma-international.org/ecma-262/7.0/][ECMAScript® 2016
  Language Specification]]: ECMAScript 2016 规格
- [[https://tc39.github.io/ecma262/][ECMAScript® 2017 Language
  Specification]]：ECMAScript 2017 规格（草案）
- [[https://github.com/tc39/ecma262][ECMAScript Current Proposals]]:
  ECMAScript 当前的所有提案
- [[https://github.com/tc39/proposals][ECMAScript Active Proposals]]:
  已经进入正式流程的提案
- [[https://github.com/hemanth/es-next][ECMAScript proposals]]：从阶段 0
  到阶段 4 的所有提案列表
- [[https://github.com/tc39/agendas][TC39 meeting agendas]]: TC39
  委员会历年的会议记录
- [[https://ecmascript-daily.github.io/][ECMAScript Daily]]: TC39
  委员会的动态
- [[https://tc39.github.io/process-document/][The TC39 Process]]:
  提案进入正式规格的流程
- [[https://thefeedbackloop.xyz/tc39-a-process-sketch-stages-0-and-1/][TC39:
  A Process Sketch, Stages 0 and 1]]: Stage 0 和 Stage 1 的含义
- [[https://thefeedbackloop.xyz/tc39-process-sketch-stage-2/][TC39
  Process Sketch, Stage 2]]: Stage 2 的含义

** 综合介绍
   :PROPERTIES:
   :CUSTOM_ID: 综合介绍
   :END:

- Axel Rauschmayer, [[http://exploringjs.com/es6/][Exploring ES6:
  Upgrade to the next version of JavaScript]]: ES6
  的专著，本书的许多代码实例来自该书
- Sayanee Basu,
  [[http://net.tutsplus.com/articles/news/ecmascript-6-today/][Use
  ECMAScript 6 Today]]
- Ariya Hidayat,
  [[http://www.sencha.com/blog/toward-modern-web-apps-with-ecmascript-6/][Toward
  Modern Web Apps with ECMAScript 6]]
- Dale Schouten,
  [[http://html5hub.com/10-ecmascript-6-tricks-you-can-perform-right-now/][10
  Ecmascript-6 tricks you can perform right now]]
- Colin Toh,
  [[http://colintoh.com/blog/lightweight-es6-features][Lightweight ES6
  Features That Pack A Punch]]: ES6 的一些"轻量级"的特性介绍
- Domenic Denicola,
  [[http://www.slideshare.net/domenicdenicola/es6-the-awesome-parts][ES6:
  The Awesome Parts]]
- Nicholas C. Zakas,
  [[https://github.com/nzakas/understandinges6][Understanding ECMAScript
  6]]
- Justin Drake,
  [[https://github.com/JustinDrake/node-es6-examples][ECMAScript 6 in
  Node.JS]]
- Ryan Dao,
  [[http://ryandao.net/portal/content/summary-ecmascript-6-major-features][Summary
  of ECMAScript 6 major features]]
- Luke Hoban, [[https://github.com/lukehoban/es6features][ES6
  features]]: ES6 新语法点的罗列
- Traceur-compiler,
  [[https://github.com/google/traceur-compiler/wiki/LanguageFeatures][Language
  Features]]: Traceur 文档列出的一些 ES6 例子
- Axel Rauschmayer,
  [[https://speakerdeck.com/rauschma/ecmascript-6-whats-next-for-javascript-august-2014][ECMAScript
  6: what's next for JavaScript?]]: 关于 ES6
  新增语法的综合介绍，有很多例子
- Axel Rauschmayer,
  [[http://www.2ality.com/2015/08/getting-started-es6.html][Getting
  started with ECMAScript 6]]: ES6 语法点的综合介绍
- Toby Ho, [[http://davidwalsh.name/es6-io][ES6 in io.js]]
- Guillermo Rauch, [[http://rauchg.com/2015/ecmascript-6/][ECMAScript
  6]]
- Benjamin De Cock,
  [[https://github.com/bendc/frontend-guidelines][Frontend Guidelines]]:
  ES6 最佳实践
- Jani Hartikainen,
  [[http://codeutopia.net/blog/2015/01/06/es6-what-are-the-benefits-of-the-new-features-in-practice/][ES6:
  What are the benefits of the new features in practice?]]
- kangax, [[http://perfectionkills.com/javascript-quiz-es6/][JavaScript
  quiz. ES6 edition]]: ES6 小测试
- Jeremy Fairbank,
  [[https://speakerdeck.com/jfairbank/html5devconf-es7-and-beyond][HTML5DevConf
  ES7 and Beyond!]]: ES7 新增语法点介绍
- Timothy Gu, [[https://timothygu.me/es-howto/][How to Read the
  ECMAScript Specification]]: 如何读懂 ES6 规格

** let 和 const
   :PROPERTIES:
   :CUSTOM_ID: let-和-const
   :END:

- Kyle Simpson, [[http://davidwalsh.name/for-and-against-let][For and
  against let]]: 讨论 let 命令的作用域
- kangax,
  [[http://es-discourse.com/t/why-typeof-is-no-longer-safe/15][Why
  typeof is no longer "safe"]]: 讨论在块级作用域内，let
  命令的变量声明和赋值的行为
- Axel Rauschmayer,
  [[http://www.2ality.com/2015/02/es6-scoping.html][Variables and
  scoping in ECMAScript 6]]: 讨论块级作用域与 let 和 const 的行为
- Nicolas Bevacqua,
  [[http://ponyfoo.com/articles/es6-let-const-and-temporal-dead-zone-in-depth][ES6
  Let, Const and the "Temporal Dead Zone" (TDZ) in Depth]]
- acorn, [[https://github.com/ternjs/acorn/issues/118][Function
  statements in strict mode]]: 块级作用域对严格模式的函数声明的影响
- Axel Rauschmayer, [[http://www.2ality.com/2016/09/global.html][ES
  proposal: global]]: 顶层对象=global=
- Mathias Bynens, [[https://mathiasbynens.be/notes/globalthis][A
  horrifying =globalThis= polyfill in universal JavaScript]]：如何写
  globalThis 的垫片库

** 解构赋值
   :PROPERTIES:
   :CUSTOM_ID: 解构赋值
   :END:

- Nick Fitzgerald, [[http://fitzgeraldnick.com/weblog/50/][Destructuring
  Assignment in ECMAScript 6]]: 详细介绍解构赋值的用法
- Nicholas C. Zakas,
  [[https://www.nczonline.net/blog/2015/10/ecmascript-6-destructuring-gotcha/][ECMAScript
  6 destructuring gotcha]]

** 字符串
   :PROPERTIES:
   :CUSTOM_ID: 字符串
   :END:

- Nicholas C. Zakas,
  [[http://www.nczonline.net/blog/2012/08/01/a-critical-review-of-ecmascript-6-quasi-literals/][A
  critical review of ECMAScript 6 quasi-literals]]
- Mozilla Developer Network,
  [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/template_strings][Template
  strings]]
- Addy Osmani,
  [[http://updates.html5rocks.com/2015/01/ES6-Template-Strings][Getting
  Literal With ES6 Template Strings]]: 模板字符串的介绍
- Blake Winton,
  [[https://weblog.latte.ca/blake/tech/firefox/templates.html][ES6
  Templates]]: 模板字符串的介绍
- Peter Jaszkowiak,
  [[https://medium.com/@PitaJ/how-to-write-a-template-compiler-in-javascript-f174df6f32f][How
  to write a template compiler in JavaScript]]:
  使用模板字符串，编写一个模板编译函数
- Axel Rauschmayer,
  [[http://www.2ality.com/2015/11/string-padding.html][ES.stage3: string
  padding]]

** 正则
   :PROPERTIES:
   :CUSTOM_ID: 正则
   :END:

- Mathias Bynens,
  [[https://mathiasbynens.be/notes/es6-unicode-regex][Unicode-aware
  regular expressions in ES6]]: 详细介绍正则表达式的 u 修饰符
- Axel Rauschmayer, [[http://www.2ality.com/2015/07/regexp-es6.html][New
  regular expression features in ECMAScript 6]]：ES6 正则特性的详细介绍
- Yang Guo,
  [[http://v8project.blogspot.jp/2016/02/regexp-lookbehind-assertions.html][RegExp
  lookbehind assertions]]：介绍后行断言
- Axel Rauschmayer,
  [[http://2ality.com/2017/05/regexp-named-capture-groups.html][ES
  proposal: RegExp named capture groups]]: 具名组匹配的介绍
- Mathias Bynens,
  [[https://mathiasbynens.be/notes/es-regexp-proposals][ECMAScript
  regular expressions are getting better!]]: 介绍 ES2018
  添加的多项正则语法

** 数值
   :PROPERTIES:
   :CUSTOM_ID: 数值
   :END:

- Nicolas Bevacqua,
  [[http://ponyfoo.com/articles/es6-number-improvements-in-depth][ES6
  Number Improvements in Depth]]
- Axel Rauschmayer, [[http://2ality.com/2017/03/es-integer.html][ES
  proposal: arbitrary precision integers]]
- Mathias Bynens,
  [[https://developers.google.com/web/updates/2018/05/bigint][BigInt:
  arbitrary-precision integers in JavaScript]]

** 数组
   :PROPERTIES:
   :CUSTOM_ID: 数组
   :END:

- Axel Rauschmayer,
  [[http://www.2ality.com/2014/05/es6-array-methods.html][ECMAScript 6's
  new array methods]]: 对 ES6 新增的数组方法的全面介绍
- TC39,
  [[https://github.com/tc39/Array.prototype.includes/][Array.prototype.includes]]:
  数组的 includes 方法的规格
- Axel Rauschmayer,
  [[http://www.2ality.com/2015/09/holes-arrays-es6.html][ECMAScript 6:
  holes in Arrays]]: 数组的空位问题

** 函数
   :PROPERTIES:
   :CUSTOM_ID: 函数
   :END:

- Nicholas C. Zakas,
  [[http://www.nczonline.net/blog/2013/09/10/understanding-ecmascript-6-arrow-functions/][Understanding
  ECMAScript 6 arrow functions]]
- Jack Franklin,
  [[http://javascriptplayground.com/blog/2014/04/real-life-es6-arrow-fn/][Real
  Life ES6 - Arrow Functions]]
- Axel Rauschmayer,
  [[http://www.2ality.com/2014/04/required-parameters-es6.html][Handling
  required parameters in ECMAScript 6]]
- Dmitry Soshnikov,
  [[http://dmitrysoshnikov.com/ecmascript/es6-notes-default-values-of-parameters/][ES6
  Notes: Default values of parameters]]: 介绍参数的默认值
- Ragan Wald,
  [[http://raganwald.com/2015/02/02/destructuring.html][Destructuring
  and Recursion in ES6]]: rest 参数和扩展运算符的详细介绍
- Axel Rauschmayer,
  [[http://www.2ality.com/2015/09/function-names-es6.html][The names of
  functions in ES6]]: 函数的 name 属性的详细介绍
- Kyle Simpson, [[http://blog.getify.com/arrow-this/][Arrow This]]:
  箭头函数并没有自己的 this
- Derick Bailey,
  [[http://derickbailey.com/2015/09/28/do-es6-arrow-functions-really-solve-this-in-javascript/][Do
  ES6 Arrow Functions Really Solve "this" In
  JavaScript?]]：使用箭头函数处理 this 指向，必须非常小心
- Mark McDonnell,
  [[http://www.integralist.co.uk/posts/js-recursion.html][Understanding
  recursion in functional JavaScript programming]]:
  如何自己实现尾递归优化
- Nicholas C. Zakas,
  [[https://www.nczonline.net/blog/2016/10/the-ecmascript-2016-change-you-probably-dont-know/][The
  ECMAScript 2016 change you probably don't know]]:
  使用参数默认值时，不能在函数内部显式开启严格模式
- Axel Rauschmayer,
  [[http://2ality.com/2017/08/optional-catch-binding.html][ES proposal:
  optional catch binding]]
- Cynthia Lee,
  [[https://medium.freecodecamp.org/when-and-why-you-should-use-es6-arrow-functions-and-when-you-shouldnt-3d851d7f0b26][When
  you should use ES6 arrow functions --- and when you shouldn't]]:
  讨论箭头函数的适用场合
- Eric Elliott,
  [[https://medium.com/javascript-scene/what-is-this-the-inner-workings-of-javascript-objects-d397bfa0708a][What
  is this?]]: 箭头函数内部的 this 的解释。

** 对象
   :PROPERTIES:
   :CUSTOM_ID: 对象
   :END:

- Addy Osmani,
  [[http://www.html5rocks.com/en/tutorials/es7/observe/][Data-binding
  Revolutions with Object.observe()]]: 介绍 Object.observe()的概念
- Sella Rafaeli,
  [[http://www.sellarafaeli.com/blog/native_javascript_data_binding][Native
  JavaScript Data-Binding]]: 如何使用 Object.observe
  方法，实现数据对象与 DOM 对象的双向绑定
- Axel Rauschmayer,
  [[http://www.2ality.com/2015/09/proto-es6.html][=__proto__= in
  ECMAScript 6]]
- Axel Rauschmayer,
  [[http://www.2ality.com/2015/10/enumerability-es6.html][Enumerability
  in ECMAScript 6]]
- Axel Rauschmayer,
  [[http://www.2ality.com/2016/02/object-getownpropertydescriptors.html][ES
  proposal: Object.getOwnPropertyDescriptors()]]
- TC39,
  [[https://github.com/tc39/proposal-object-getownpropertydescriptors][Object.getOwnPropertyDescriptors
  Proposal]]
- David Titarenco,
  [[https://dvt.name/2018/06/02/spread-syntax-breaks-javascript/][How
  Spread Syntax Breaks JavaScript]]: 扩展运算符的一些不合理的地方

** Symbol
   :PROPERTIES:
   :CUSTOM_ID: symbol
   :END:

- Axel Rauschmayer,
  [[http://www.2ality.com/2014/12/es6-symbols.html][Symbols in
  ECMAScript 6]]: Symbol 简介
- MDN,
  [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol][Symbol]]:
  Symbol 类型的详细介绍
- Jason Orendorff,
  [[https://hacks.mozilla.org/2015/06/es6-in-depth-symbols/][ES6 In
  Depth: Symbols]]
- Keith Cirkel,
  [[http://blog.keithcirkel.co.uk/metaprogramming-in-es6-symbols/][Metaprogramming
  in ES6: Symbols and why they're awesome]]: Symbol 的深入介绍
- Axel Rauschmayer,
  [[http://www.2ality.com/2015/09/well-known-symbols-es6.html][Customizing
  ES6 via well-known symbols]]
- Derick Bailey,
  [[https://derickbailey.com/2016/03/09/creating-a-true-singleton-in-node-js-with-es6-symbols/][Creating
  A True Singleton In Node.js, With ES6 Symbols]]
- Das Surma, [[https://dassur.ma/things/reading-specs-2/][How to read
  web specs Part IIa -- Or: ECMAScript Symbols]]: 介绍 Symbol 的规格

** Set 和 Map
   :PROPERTIES:
   :CUSTOM_ID: set-和-map
   :END:

- Mozilla Developer Network,
  [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet][WeakSet]]：介绍
  WeakSet 数据结构
- Dwayne Charrington,
  [[http://ilikekillnerds.com/2015/02/what-are-weakmaps-in-es6/][What
  Are Weakmaps In ES6?]]: WeakMap 数据结构介绍
- Axel Rauschmayer,
  [[http://www.2ality.com/2015/01/es6-maps-sets.html][ECMAScript 6: maps
  and sets]]: Set 和 Map 结构的详细介绍
- Jason Orendorff,
  [[https://hacks.mozilla.org/2015/06/es6-in-depth-collections/][ES6 In
  Depth: Collections]]：Set 和 Map 结构的设计思想
- Axel Rauschmayer,
  [[http://www.2ality.com/2015/08/es6-map-json.html][Converting ES6 Maps
  to and from JSON]]: 如何将 Map 与其他数据结构互相转换

** Proxy 和 Reflect
   :PROPERTIES:
   :CUSTOM_ID: proxy-和-reflect
   :END:

- Nicholas C. Zakas,
  [[http://www.nczonline.net/blog/2014/04/22/creating-defensive-objects-with-es6-proxies/][Creating
  defensive objects with ES6 proxies]]
- Axel Rauschmayer,
  [[http://www.2ality.com/2014/12/es6-proxies.html][Meta programming
  with ECMAScript 6 proxies]]: Proxy 详解
- Daniel Zautner,
  [[http://dzautner.com/meta-programming-javascript-using-proxies/][Meta-programming
  JavaScript Using Proxies]]: 使用 Proxy 实现元编程
- Tom Van Cutsem,
  [[https://github.com/tvcutsem/harmony-reflect/wiki][Harmony-reflect]]:
  Reflect 对象的设计目的
- Tom Van Cutsem,
  [[https://github.com/tvcutsem/harmony-reflect/blob/master/doc/traps.md][Proxy
  Traps]]: Proxy 拦截操作一览
- Tom Van Cutsem,
  [[https://github.com/tvcutsem/harmony-reflect/blob/master/doc/api.md][Reflect
  API]]
- Tom Van Cutsem,
  [[https://github.com/tvcutsem/harmony-reflect/blob/master/doc/handler_api.md][Proxy
  Handler API]]
- Nicolas Bevacqua,
  [[http://ponyfoo.com/articles/es6-proxies-in-depth][ES6 Proxies in
  Depth]]
- Nicolas Bevacqua,
  [[http://ponyfoo.com/articles/es6-proxy-traps-in-depth][ES6 Proxy
  Traps in Depth]]
- Nicolas Bevacqua,
  [[http://ponyfoo.com/articles/more-es6-proxy-traps-in-depth][More ES6
  Proxy Traps in Depth]]
- Axel Rauschmayer,
  [[http://www.2ality.com/2016/11/proxying-builtins.html][Pitfall: not
  all objects can be wrapped transparently by proxies]]
- Bertalan Miklos,
  [[https://blog.risingstack.com/writing-a-javascript-framework-data-binding-es6-proxy/][Writing
  a JavaScript Framework - Data Binding with ES6 Proxies]]: 使用 Proxy
  实现观察者模式
- Keith Cirkel,
  [[https://www.keithcirkel.co.uk/metaprogramming-in-es6-part-2-reflect/][Metaprogramming
  in ES6: Part 2 - Reflect]]: Reflect API 的详细介绍

** Promise 对象
   :PROPERTIES:
   :CUSTOM_ID: promise-对象
   :END:

- Jake Archibald,
  [[http://www.html5rocks.com/en/tutorials/es6/promises/][JavaScript
  Promises: There and back again]]
- Jake Archibald,
  [[https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/][Tasks,
  microtasks, queues and schedules]]
- Tilde, [[https://github.com/tildeio/rsvp.js][rsvp.js]]
- Sandeep Panda,
  [[http://www.sitepoint.com/overview-javascript-promises/][An Overview
  of JavaScript Promises]]: ES6 Promise 入门介绍
- Dave Atchley, [[http://www.datchley.name/es6-promises/][ES6
  Promises]]: Promise 的语法介绍
- Axel Rauschmayer,
  [[http://www.2ality.com/2014/10/es6-promises-api.html][ECMAScript 6
  promises (2/2): the API]]: 对 ES6 Promise 规格和用法的详细介绍
- Jack Franklin,
  [[http://javascriptplayground.com/blog/2015/02/promises/][Embracing
  Promises in JavaScript]]: catch 方法的例子
- Ronald Chen,
  [[https://medium.com/@pyrolistical/how-to-get-out-of-promise-hell-8c20e0ab0513#.2an1he6vf][How
  to escape Promise Hell]]: 如何使用=Promise.all=方法的一些很好的例子
- Jordan Harband,
  [[https://github.com/ljharb/proposal-promise-try][proposal-promise-try]]:
  Promise.try() 方法的提案
- Sven Slootweg,
  [[http://cryto.net/~joepie91/blog/2016/05/11/what-is-promise-try-and-why-does-it-matter/][What
  is Promise.try, and why does it matter?]]: Promise.try() 方法的优点
- Yehuda Katz,
  [[https://thefeedbackloop.xyz/tc39-promises-promises/][TC39: Promises,
  Promises]]: Promise.try() 的用处

** Iterator
   :PROPERTIES:
   :CUSTOM_ID: iterator
   :END:

- Mozilla Developer Network,
  [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators][Iterators
  and generators]]
- Mozilla Developer Network,
  [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/The_Iterator_protocol][The
  Iterator protocol]]
- Jason Orendorff,
  [[https://hacks.mozilla.org/2015/04/es6-in-depth-iterators-and-the-for-of-loop/][ES6
  In Depth: Iterators and the for-of loop]]: 遍历器与 for...of
  循环的介绍
- Axel Rauschmayer,
  [[http://www.2ality.com/2013/06/iterators-generators.html][Iterators
  and generators in ECMAScript 6]]: 探讨 Iterator 和 Generator
  的设计目的
- Axel Rauschmayer,
  [[http://www.2ality.com/2015/02/es6-iteration.html][Iterables and
  iterators in ECMAScript 6]]: Iterator 的详细介绍
- Kyle Simpson,
  [[http://blog.getify.com/iterating-es6-numbers/][Iterating ES6
  Numbers]]: 在数值对象上部署遍历器

** Generator
   :PROPERTIES:
   :CUSTOM_ID: generator
   :END:

- Matt Baker,
  [[http://flippinawesome.org/2014/02/10/replacing-callbacks-with-es6-generators/][Replacing
  callbacks with ES6 Generators]]
- Steven Sanderson,
  [[http://blog.stevensanderson.com/2013/12/21/experiments-with-koa-and-javascript-generators/][Experiments
  with Koa and JavaScript Generators]]
- jmar777,
  [[http://devsmash.com/blog/whats-the-big-deal-with-generators][What's
  the Big Deal with Generators?]]
- Marc Harter,
  [[http://strongloop.com/strongblog/how-to-generators-node-js-yield-use-cases/][Generators
  in Node.js: Common Misconceptions and Three Good Use Cases]]: 讨论
  Generator 函数的作用
- StackOverflow,
  [[http://stackoverflow.com/questions/20977379/es6-yield-what-happens-to-the-arguments-of-the-first-call-next][ES6
  yield : what happens to the arguments of the first call next()?]]:
  第一次使用 next 方法时不能带有参数
- Kyle Simpson, [[http://davidwalsh.name/es6-generators][ES6 Generators:
  Complete Series]]: 由浅入深探讨 Generator 的系列文章，共四篇
- Gajus Kuizinas,
  [[http://gajus.com/blog/2/the-definetive-guide-to-the-javascript-generators][The
  Definitive Guide to the JavaScript Generators]]: 对 Generator
  的综合介绍
- Jan Krems,
  [[https://gist.github.com/jkrems/04a2b34fb9893e4c2b5c][Generators Are
  Like Arrays]]: 讨论 Generator 可以被当作数据结构看待
- Harold Cooper, [[http://syzygy.st/javascript-coroutines/][Coroutine
  Event Loops in JavaScript]]: Generator 用于实现状态机
- Ruslan Ismagilov,
  [[https://github.com/isRuslan/learn-generators][learn-generators]]:
  编程练习，共 6 道题
- Steven Sanderson,
  [[http://blog.stevensanderson.com/2013/12/21/experiments-with-koa-and-javascript-generators/][Experiments
  with Koa and JavaScript Generators]]: Generator 入门介绍，以 Koa
  框架为例
- Mahdi Dibaiee,
  [[http://dibaiee.ir/es7-array-generator-comprehensions/][ES7 Array and
  Generator comprehensions]]：ES7 的 Generator 推导
- Nicolas Bevacqua,
  [[http://ponyfoo.com/articles/es6-generators-in-depth][ES6 Generators
  in Depth]]
- Axel Rauschmayer,
  [[http://www.2ality.com/2015/03/es6-generators.html][ES6 generators in
  depth]]: Generator 规格的详尽讲解
- Derick Bailey,
  [[https://derickbailey.com/2015/10/05/using-es6-generators-to-short-circuit-hierarchical-data-iteration/][Using
  ES6 Generators To Short-Circuit Hierarchical Data Iteration]]：使用
  for...of 循环完成预定的操作步骤

** 异步操作和 Async 函数
   :PROPERTIES:
   :CUSTOM_ID: 异步操作和-async-函数
   :END:

- Luke Hoban,
  [[https://github.com/lukehoban/ecmascript-asyncawait][Async Functions
  for ECMAScript]]: Async 函数的设计思想，与 Promise、Gernerator
  函数的关系
- Jafar Husain,
  [[https://github.com/jhusain/asyncgenerator][Asynchronous Generators
  for ES7]]: Async 函数的深入讨论
- Nolan Lawson,
  [[http://pouchdb.com/2015/03/05/taming-the-async-beast-with-es7.html][Taming
  the asynchronous beast with ES7]]: async 函数通俗的实例讲解
- Jafar Husain,
  [[https://docs.google.com/file/d/0B4PVbLpUIdzoMDR5dWstRllXblU/view?sle=true][Async
  Generators]]: 对 async 与 Generator 混合使用的一些讨论
- Daniel Brain,
  [[https://medium.com/@bluepnume/learn-about-promises-before-you-start-using-async-await-eb148164a9c8][Understand
  promises before you start using async/await]]: 讨论 async/await 与
  Promise 的关系
- Jake Archibald,
  [[https://developers.google.com/web/fundamentals/getting-started/primers/async-functions][Async
  functions - making promises friendly]]
- Axel Rauschmayer,
  [[http://www.2ality.com/2016/10/asynchronous-iteration.html][ES
  proposal: asynchronous iteration]]: 异步遍历器的详细介绍
- Dima Grossman,
  [[http://blog.grossman.io/how-to-write-async-await-without-try-catch-blocks-in-javascript/][How
  to write async await without try-catch blocks in JavaScript]]: 除了
  try/catch 以外的 async 函数内部捕捉错误的方法
- Mostafa Gaafa,
  [[https://hackernoon.com/6-reasons-why-javascripts-async-await-blows-promises-away-tutorial-c7ec10518dd9][6
  Reasons Why JavaScript's Async/Await Blows Promises Away]]: Async
  函数的6个好处
- Mathias Bynens,
  [[https://mathiasbynens.be/notes/async-stack-traces][Asynchronous
  stack traces: why await beats Promise#then()]]: async
  函数可以保留错误堆栈

** Class
   :PROPERTIES:
   :CUSTOM_ID: class
   :END:

- Sebastian Porto,
  [[https://reinteractive.net/posts/235-es6-classes-and-javascript-prototypes][ES6
  classes and JavaScript prototypes]]: ES6 Class 的写法与 ES5 Prototype
  的写法对比
- Jack Franklin,
  [[http://javascriptplayground.com/blog/2014/07/introduction-to-es6-classes-tutorial/][An
  introduction to ES6 classes]]: ES6 class 的入门介绍
- Axel Rauschmayer,
  [[http://www.2ality.com/2014/12/es6-oop.html][ECMAScript 6: new OOP
  features besides classes]]
- Axel Rauschmayer,
  [[http://www.2ality.com/2015/02/es6-classes-final.html][Classes in
  ECMAScript 6 (final semantics)]]: Class 语法的详细介绍和设计思想分析
- Eric Faust,
  [[https://hacks.mozilla.org/2015/08/es6-in-depth-subclassing/][ES6 In
  Depth: Subclassing]]: Class 语法的深入介绍
- Nicolás Bevacqua,
  [[https://ponyfoo.com/articles/binding-methods-to-class-instance-objects][Binding
  Methods to Class Instance Objects]]: 如何绑定类的实例中的 this
- Jamie Kyle,
  [[https://jamie.build/javascripts-new-private-class-fields.html][JavaScript's
  new #private class fields]]：私有属性的介绍。
- Mathias Bynens,
  [[https://developers.google.com/web/updates/2018/12/class-fields][Public
  and private class fields]]：实例属性的新写法的介绍。

** Decorator
   :PROPERTIES:
   :CUSTOM_ID: decorator
   :END:

- Maximiliano Fierro,
  [[http://elmasse.github.io/js/decorators-bindings-es7.html][Declarative
  vs Imperative]]: Decorators 和 Mixin 介绍
- Justin Fagnani,
  [[http://justinfagnani.com/2015/12/21/real-mixins-with-javascript-classes/]["Real"
  Mixins with JavaScript Classes]]: 使用类的继承实现 Mixin
- Addy Osmani,
  [[https://medium.com/google-developers/exploring-es7-decorators-76ecb65fb841][Exploring
  ES2016 Decorators]]: Decorator 的深入介绍
- Sebastian McKenzie,
  [[https://github.com/wycats/javascript-decorators/issues/4][Allow
  decorators for functions as well]]: 为什么修饰器不能用于函数
- Maximiliano Fierro,
  [[http://cocktailjs.github.io/blog/traits-with-es7-decorators.html][Traits
  with ES7 Decorators]]: Trait 的用法介绍
- Jonathan Creamer:
  [[http://jonathancreamer.com/using-es2016-decorators-to-publish-on-an-event-bus/][Using
  ES2016 Decorators to Publish on an Event Bus]]:
  使用修饰器实现自动发布事件

** Module
   :PROPERTIES:
   :CUSTOM_ID: module
   :END:

- Jack Franklin,
  [[http://24ways.org/2014/javascript-modules-the-es6-way/][JavaScript
  Modules the ES6 Way]]: ES6 模块入门
- Axel Rauschmayer,
  [[http://www.2ality.com/2014/09/es6-modules-final.html][ECMAScript 6
  modules: the final syntax]]: ES6 模块的介绍，以及与 CommonJS
  规格的详细比较
- Dave Herman,
  [[http://calculist.org/blog/2012/06/29/static-module-resolution/][Static
  module resolution]]: ES6 模块的静态化设计思想
- Jason Orendorff,
  [[https://hacks.mozilla.org/2015/08/es6-in-depth-modules/][ES6 In
  Depth: Modules]]: ES6 模块设计思想的介绍
- Ben Newman, [[http://benjamn.github.io/empirenode-2015/#/][The
  Importance of import and export]]: ES6 模块的设计思想
- ESDiscuss,
  [[https://esdiscuss.org/topic/why-is-export-default-var-a-1-invalid-syntax][Why
  is "export default var a = 1;" invalid syntax?]]
- Bradley Meck,
  [[https://github.com/nodejs/node-eps/blob/master/002-es6-modules.md][ES6
  Module Interoperability]]: 介绍 Node 如何处理 ES6 语法加载 CommonJS
  模块
- Axel Rauschmayer,
  [[http://www.2ality.com/2017/01/babel-esm-spec-mode.html][Making
  transpiled ES modules more spec-compliant]]: ES6 模块编译成 CommonJS
  模块的详细介绍
- Axel Rauschmayer,
  [[http://www.2ality.com/2017/01/import-operator.html][ES proposal:
  import() -- dynamically importing ES modules]]: import() 的用法
- Node EPS,
  [[https://github.com/nodejs/node-eps/blob/master/002-es-modules.md][ES
  Module Interoperability]]: Node 对 ES6 模块的处理规格
- Dan Fabulich,
  [[https://redfin.engineering/node-modules-at-war-why-commonjs-and-es-modules-cant-get-along-9617135eeca1][Why
  CommonJS and ES Modules Can't Get Along]]: Node.js 对 ES6 模块的处理

** 二进制数组
   :PROPERTIES:
   :CUSTOM_ID: 二进制数组
   :END:

- Ilmari Heikkinen,
  [[http://www.html5rocks.com/en/tutorials/webgl/typed_arrays/][Typed
  Arrays: Binary Data in the Browser]]
- Khronos,
  [[http://www.khronos.org/registry/typedarray/specs/latest/][Typed
  Array Specification]]
- Ian Elliot,
  [[http://www.i-programmer.info/projects/36-web/6234-reading-a-bmp-file-in-javascript.html][Reading
  A BMP File In JavaScript]]
- Renato Mangini,
  [[http://updates.html5rocks.com/2012/06/How-to-convert-ArrayBuffer-to-and-from-String][How
  to convert ArrayBuffer to and from String]]
- Axel Rauschmayer,
  [[http://www.2ality.com/2015/09/typed-arrays.html][Typed Arrays in
  ECMAScript 6]]
- Axel Rauschmayer,
  [[http://2ality.com/2017/01/shared-array-buffer.html][ES proposal:
  Shared memory and atomics]]
- Lin Clark,
  [[https://hacks.mozilla.org/2017/06/avoiding-race-conditions-in-sharedarraybuffers-with-atomics/][Avoiding
  race conditions in SharedArrayBuffers with Atomics]]: Atomics
  对象使用场景的解释
- Lars T Hansen,
  [[https://github.com/tc39/ecmascript_sharedmem/blob/master/TUTORIAL.md][Shared
  memory - a brief tutorial]]
- James Milner,
  [[https://www.sitepen.com/blog/2018/09/19/the-return-of-sharedarraybuffers-and-atomics/][The
  Return of SharedArrayBuffers and Atomics]]

** SIMD
   :PROPERTIES:
   :CUSTOM_ID: simd
   :END:

- TC39,
  [[https://docs.google.com/presentation/d/1MY9NHrHmL7ma7C8dyNXvmYNNGgVmmxXk8ZIiQtPlfH4/edit#slide=id.p19][SIMD.js
  Stage 2]]
- MDN,
  [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SIMD][SIMD]]
- TC39, [[https://github.com/tc39/ecmascript_simd][ECMAScript SIMD]]
- Axel Rauschmayer,
  [[http://www.2ality.com/2013/12/simd-js.html][JavaScript gains support
  for SIMD]]

** 工具
   :PROPERTIES:
   :CUSTOM_ID: 工具
   :END:

- Babel,
  [[https://github.com/thejameskyle/babel-handbook/tree/master/translations/en][Babel
  Handbook]]: Babel 的用法介绍
- Google,
  [[https://github.com/google/traceur-compiler][traceur-compiler]]:
  Traceur 编译器
- Casper Beyer,
  [[http://caspervonb.github.io/2014/03/05/ecmascript6-features-and-tools.html][ECMAScript
  6 Features and Tools]]
- Stoyan Stefanov,
  [[http://www.phpied.com/writing-es6-today-with-jstransform/][Writing
  ES6 today with jstransform]]
- ES6 Module Loader,
  [[https://github.com/ModuleLoader/es6-module-loader][ES6 Module Loader
  Polyfill]]: 在浏览器和 node.js 加载 ES6 模块的一个库，文档里对 ES6
  模块有详细解释
- Paul Miller, [[https://github.com/paulmillr/es6-shim][es6-shim]]:
  一个针对老式浏览器，模拟 ES6 部分功能的垫片库（shim）
- army8735, [[https://github.com/army8735/jsdc][JavaScript Downcast]]:
  国产的 ES6 到 ES5 的转码器
- esnext, [[https://github.com/esnext/es6-module-transpiler][ES6 Module
  Transpiler]]：基于 node.js 的将 ES6 模块转为 ES5 代码的命令行工具
- Sebastian McKenzie, [[http://babeljs.io/][BabelJS]]: ES6 转译器
- SystemJS, [[https://github.com/systemjs/systemjs][SystemJS]]:
  在浏览器中加载 AMD、CJS、ES6 模块的一个垫片库
- Modernizr,
  [[https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-Browser-Polyfills#ecmascript-6-harmony][HTML5
  Cross Browser Polyfills]]: ES6 垫片库清单
- Facebook, [[https://github.com/facebook/regenerator][regenerator]]: 将
  Generator 函数转为 ES5 的转码器
